// In the name of Alah, the most merciful, the most gracious
#include <bits/stdc++.h>
using namespace std;

#define ll int
#define pb push_back
#define vl vector<ll>
#define mh ios::sync_with_stdio(false); cin.tie(0);
#define nl '\n'
#define rep(i, n) for (int i = 0; i < (n); ++i)

const ll N = 3005;

ll dp[N][N];
string s, t;

// Recursive DP to find length of LCS for s[1..i], t[1..j]
ll solve(int i, int j) {
    if (i <= 0 or j <= 0) return 0;
    ll &an = dp[i][j];
    if (~an) return an;
    an = 0;
    if (s[i] == t[j]) an = 1 + solve(i - 1, j - 1);
    else {
        an = max(solve(i - 1, j), solve(i, j - 1));
    }
    return an;
}

// Reconstruct the LCS string by backtracking the dp table
void print(int i, int j) {
    if (i <= 0 or j <= 0) return;
    ll &an = dp[i][j];
    if (s[i] == t[j] and an == 1 + dp[i - 1][j - 1]) {
        print(i - 1, j - 1);
        cout << s[i];
    } else if (an == dp[i - 1][j]) print(i - 1, j);
    else print(i, j - 1);
}

int main() {
    mh
    cin >> s >> t;
    int n = (int)s.size(), m = (int)t.size();

    // 1-based indexing to simplify DP transitions
    s = "$" + s;
    t = "$" + t;

    memset(dp, -1, sizeof(dp));

    // Base cases (optional since solve() handles boundaries)
    for (int i = 0; i < N; ++i) {
        dp[i][0] = dp[0][i] = 0;
    }

    int len = solve(n, m);

    print(n, m);  // Print the LCS string

    cout << nl;

    return 0;
}
